[gd_resource type="ShaderMaterial" load_steps=6 format=2]

[ext_resource path="res://assets/environment/water/Water_Texture.tres" type="Texture" id=1]

[sub_resource type="VisualShaderNodeTexture" id=1]
output_port_for_preview = 1
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeScalarOp" id=2]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.65 ]

[sub_resource type="VisualShaderNodeCompare" id=3]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.4, 2, 1e-05 ]
function = 2

[sub_resource type="VisualShader" id=4]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_3;



void vertex() {
// Output:0

}

void fragment() {
// Texture:3
	vec4 tex_frg_3_read = texture(tex_frg_3, UV.xy);
	vec3 n_out3p0 = tex_frg_3_read.rgb;
	float n_out3p1 = tex_frg_3_read.a;

// Compare:8
	float n_in8p1 = 0.40000;
	bool n_out8p0 = dot(n_out3p0, vec3(0.333333, 0.333333, 0.333333))>n_in8p1;

// ScalarOp:6
	float n_in6p1 = 0.65000;
	float n_out6p0 = (n_out8p0 ? 1.0 : 0.0) + n_in6p1;

// Output:0
	COLOR.rgb = n_out3p0;
	COLOR.a = n_out6p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 0, 75 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 700, 60 )
nodes/fragment/3/node = SubResource( 1 )
nodes/fragment/3/position = Vector2( -240, -60 )
nodes/fragment/6/node = SubResource( 2 )
nodes/fragment/6/position = Vector2( 320, 160 )
nodes/fragment/8/node = SubResource( 3 )
nodes/fragment/8/position = Vector2( 80, 140 )
nodes/fragment/connections = PoolIntArray( 3, 0, 0, 0, 6, 0, 0, 1, 3, 0, 8, 0, 8, 0, 6, 0 )

[resource]
shader = SubResource( 4 )
