[gd_resource type="ShaderMaterial" load_steps=6 format=2]

[ext_resource path="res://assets/tiles/kelp/kelp_lightmap_texture.tres" type="Texture" id=1]

[sub_resource type="VisualShaderNodeTexture" id=1]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeVectorOp" id=2]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeCompare" id=3]
output_port_for_preview = 0
function = 2

[sub_resource type="VisualShader" id=4]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_3;



void vertex() {
// Output:0

}

void fragment() {
// Texture:3
	vec4 tex_frg_3_read = texture(tex_frg_3, UV.xy);
	vec3 n_out3p0 = tex_frg_3_read.rgb;
	float n_out3p1 = tex_frg_3_read.a;

// VectorOp:4
	vec3 n_out4p0 = n_out3p0 * vec3(n_out3p1);

// Compare:5
	float n_in5p1 = 0.00000;
	bool n_out5p0 = dot(n_out4p0, vec3(0.333333, 0.333333, 0.333333))>n_in5p1;

// Output:0
	COLOR.rgb = n_out4p0;
	COLOR.a = (n_out5p0 ? 1.0 : 0.0);
	NORMAL = vec3(n_out5p0 ? 1.0 : 0.0);
	NORMALMAP_DEPTH = (n_out5p0 ? 1.0 : 0.0);

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 0, 19.5 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 1060, 120 )
nodes/fragment/3/node = SubResource( 1 )
nodes/fragment/3/position = Vector2( 320, 100 )
nodes/fragment/4/node = SubResource( 2 )
nodes/fragment/4/position = Vector2( 600, 200 )
nodes/fragment/5/node = SubResource( 3 )
nodes/fragment/5/position = Vector2( 820, 280 )
nodes/fragment/connections = PoolIntArray( 3, 1, 4, 1, 3, 0, 4, 0, 4, 0, 0, 0, 4, 0, 5, 0, 5, 0, 0, 1, 5, 0, 0, 4, 5, 0, 0, 2 )

[resource]
shader = SubResource( 4 )
